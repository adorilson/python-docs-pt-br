# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2021
# Raphael Mendonça, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-04 16:29+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Raphael Mendonça, 2021\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "Objetos Inteiros"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Todos os inteiros são implementados como objetos inteiros \"longos\" de "
"tamanho arbitrário."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Em caso de erro, a maioria das APIs ``PyLong_As*`` retorna ``(tipo de "
"retorno)-1`` que não pode ser distinguido de um número. Use :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa um objeto inteiro Python."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Esta instância de :c:type:`PyTypeObject` representa o tipo inteiro Python. "
"Este é o mesmo objeto que :class:`int` na camada Python."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Retorna true se seu argumento é um :c:type:`PyLongObject` ou um subtipo de :"
"c:type:`PyLongObject`. Esta função sempre tem sucesso."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Retorna true se seu argumento é um :c:type:`PyLongObject`, mas não um "
"subtipo de :c:type:`PyLongObject`. Esta função sempre tem sucesso."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` de *v* ou ``NULL`` em caso de "
"falha."

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` de um :c:type:`Py_ssize_t` C "
"ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` de um :c:type:`size_t` C ou "
"``NULL`` em caso de falha."

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` da parte inteira de *v* ou "
"``NULL`` em caso de falha."

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"``NULL``, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, *str* is interpreted "
"using the :ref:`integers` definition; in this case, leading zeros in a non-"
"zero decimal number raises a :exc:`ValueError`. If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading spaces and single "
"underscores after a base specifier and between digits are ignored.  If there "
"are no digits, :exc:`ValueError` will be raised."
msgstr ""
"Retorna um novo :c:type:`PyLongObject` com base no valor da string em *str*, "
"que é interpretado de acordo com a raiz em *base*. Se *pend* não for "
"``NULL``, *\\*pend* apontará para o primeiro caractere em *str* que segue a "
"representação do número. Se *base* for ``0``, *str* é interpretado usando a "
"definição de :ref:`integers`; neste caso, zeros à esquerda em um número "
"decimal diferente de zero aumenta um :exc:`ValueError`. Se *base* não for "
"``0``, deve estar entre ``2`` e ``36``, inclusive. Espaços iniciais e "
"sublinhados simples após um especificador de base e entre dígitos são "
"ignorados. Se não houver dígitos, :exc:`ValueError` será levantada."

#: ../../c-api/long.rst:99
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""
"Converte uma sequência de dígitos Unicode na string *u* para um valor "
"inteiro Python."

#: ../../c-api/long.rst:107
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Cria um inteiro Python a partir do ponteiro *p*. O valor do ponteiro pode "
"ser recuperado do valor resultante usando :c:func:`PyLong_AsVoidPtr`."

#: ../../c-api/long.rst:118 ../../c-api/long.rst:136
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:122
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""

#: ../../c-api/long.rst:125 ../../c-api/long.rst:145 ../../c-api/long.rst:166
#: ../../c-api/long.rst:186 ../../c-api/long.rst:209
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``-1`` no caso de erro.  Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:127 ../../c-api/long.rst:147 ../../c-api/long.rst:168
#: ../../c-api/long.rst:190 ../../c-api/long.rst:274 ../../c-api/long.rst:294
msgid "Use :meth:`__index__` if available."
msgstr "Usa :meth:`__index__`, se disponível."

#: ../../c-api/long.rst:130 ../../c-api/long.rst:150 ../../c-api/long.rst:171
#: ../../c-api/long.rst:193 ../../c-api/long.rst:277 ../../c-api/long.rst:297
msgid "This function will no longer use :meth:`__int__`."
msgstr ""

#: ../../c-api/long.rst:140
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than :const:"
"`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Se o valor de *obj* for maior que :const:`LONG_MAX` ou menor que :const:"
"`LONG_MIN`, define *\\*overflow* para ``1`` ou ``-1``, respectivamente, e "
"retorna ``-1``; caso contrário, define *\\*overflow* para ``0``. Se qualquer "
"outra exceção ocorrer, define *\\*overflow* para ``0`` e retorne ``-1`` como "
"de costume."

#: ../../c-api/long.rst:159 ../../c-api/long.rst:177
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:163
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""

#: ../../c-api/long.rst:181
msgid ""
"If the value of *obj* is greater than :const:`LLONG_MAX` or less than :const:"
"`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Se o valor de *obj* for maior que :const:`LLONG_MAX` ou menor que :const:"
"`LLONG_MIN`, define *\\*overflow* para ``1`` ou ``-1``, respectivamente, e "
"retorna ``-1``; caso contrário, define *\\*overflow* para ``0``. Se qualquer "
"outra exceção ocorrer, define *\\*overflow* para ``0`` e retorne ``-1`` como "
"de costume."

#: ../../c-api/long.rst:203
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação de :c:type:`Py_ssize_t` C de *pylong*. *pylong* "
"deve ser uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:206
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo de um :c:type:`Py_ssize_t`."

#: ../../c-api/long.rst:218
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:221
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""

#: ../../c-api/long.rst:224
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long)-1`` no caso de erro.  Use :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../../c-api/long.rst:234
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação de :c:type:`size_t` C de *pylong*. *pylong* deve "
"ser uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:237
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo de um :c:type:`size_t`."

#: ../../c-api/long.rst:240
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(size)-1`` no caso de erro.  Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:249
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:252
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""

#: ../../c-api/long.rst:255
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long long)-1`` no caso de erro.  Use :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:258
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"Um *pylong* negativo agora levanta :exc:`OverflowError`, não :exc:"
"`TypeError`."

#: ../../c-api/long.rst:264
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:268
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:271
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long)-1`` no caso de erro.  Use :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../../c-api/long.rst:283
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:"
"`__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:288
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:291
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Retorna ``(unsigned long long)-1`` no caso de erro.  Use :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:303
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:306
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""

#: ../../c-api/long.rst:309
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``-1.0`` no caso de erro.  Use :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:314
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""

#: ../../c-api/long.rst:319
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``NULL`` no caso de erro.  Use :c:func:`PyErr_Occurred` para "
"desambiguar."
